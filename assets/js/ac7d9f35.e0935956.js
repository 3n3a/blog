"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4257],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||s;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=p;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4753:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return c}});var r=t(3117),o=(t(7294),t(3905));const s={title:'A Guide to Creating a "Hello World" Webserver in C',date:new Date("2022-01-16T13:42:00.000Z"),draft:!1,authors:"enk",tags:["tutorial","c","webserver"]},i=void 0,a={permalink:"/webserver-c",editUrl:"https://github.com/3n3a/blog/tree/master/blog/webserver-c.md",source:"@site/blog/webserver-c.md",title:'A Guide to Creating a "Hello World" Webserver in C',description:'Creating a basic webserver in C is a relatively straightforward process. In this guide, we will walk through the steps of setting up a simple webserver that will output the message "Hello World" in plain text.',date:"2022-01-16T13:42:00.000Z",formattedDate:"January 16, 2022",tags:[{label:"tutorial",permalink:"/tags/tutorial"},{label:"c",permalink:"/tags/c"},{label:"webserver",permalink:"/tags/webserver"}],readingTime:2.425,hasTruncateMarker:!0,authors:[{name:"Enea Kr\xe4henb\xfchl",title:"Software Developer",url:"https://3n3a.ch",imageURL:"img/favicon.ico",key:"enk"}],frontMatter:{title:'A Guide to Creating a "Hello World" Webserver in C',date:"2022-01-16T13:42:00.000Z",draft:!1,authors:"enk",tags:["tutorial","c","webserver"]},prevItem:{title:"Create a Blog with Phoenix in Elixir.",permalink:"/phoenix_blog_tutorial"},nextItem:{title:"Hackernews Client with Hackerfeed API",permalink:"/hackernews_client"}},l={authorsImageUrls:[void 0]},c=[{value:"Step 1: Import Required Libraries",id:"step-1-import-required-libraries",level:2},{value:"Step 2: Define Constants",id:"step-2-define-constants",level:2},{value:"Step 4: Listen for Incoming Connections",id:"step-4-listen-for-incoming-connections",level:2},{value:"Step 5: Accept Incoming Connections",id:"step-5-accept-incoming-connections",level:2},{value:"Step 6: Send the &quot;Hello World&quot; Response",id:"step-6-send-the-hello-world-response",level:2},{value:"Step 7: Close the Connection",id:"step-7-close-the-connection",level:2},{value:"Final Result",id:"final-result",level:2}],d={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Creating a basic webserver in C is a relatively straightforward process. In this guide, we will walk through the steps of setting up a simple webserver that will output the message "Hello World" in plain text.'),(0,o.kt)("h2",{id:"step-1-import-required-libraries"},"Step 1: Import Required Libraries"),(0,o.kt)("p",null,"To begin, we will need to import the necessary libraries for our webserver. The most commonly used libraries for creating a webserver in C are socket.h and netinet/in.h. These libraries provide the necessary functions for creating and managing network connections."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n")),(0,o.kt)("h2",{id:"step-2-define-constants"},"Step 2: Define Constants"),(0,o.kt)("p",null,"Next, we will define some constants that will be used throughout our program. These include the port number that our webserver will listen on, as well as the maximum number of incoming connections that can be queued."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"#define PORT 8080\n#define MAX_CONNECTIONS 5\n")),(0,o.kt)("p",null,"#3 Step 3: Create the Server Socket"),(0,o.kt)("p",null,"Now we will create the server socket that will be used to listen for incoming connections. The socket() function is used to create a new socket, and the bind() function is used to associate the socket with a specific port number."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"int server_fd = socket(AF_INET, SOCK_STREAM, 0);\nstruct sockaddr_in address;\naddress.sin_family = AF_INET;\naddress.sin_addr.s_addr = INADDR_ANY;\naddress.sin_port = htons( PORT );\nbind(server_fd, (struct sockaddr *)&address, sizeof(address));\n")),(0,o.kt)("h2",{id:"step-4-listen-for-incoming-connections"},"Step 4: Listen for Incoming Connections"),(0,o.kt)("p",null,"With our server socket created, we can now listen for incoming connections using the listen() function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"listen(server_fd, MAX_CONNECTIONS);\n")),(0,o.kt)("h2",{id:"step-5-accept-incoming-connections"},"Step 5: Accept Incoming Connections"),(0,o.kt)("p",null,"Once we have begun listening for connections, we can use the accept() function to accept incoming connections and create a new socket for communicating with the client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"int addrlen = sizeof(address);\nint new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);\n")),(0,o.kt)("h2",{id:"step-6-send-the-hello-world-response"},'Step 6: Send the "Hello World" Response'),(0,o.kt)("p",null,'With our connection established, we can now send the "Hello World" response to the client using the send() function.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'char *hello = "Hello World";\nsend(new_socket , hello , strlen(hello) , 0 );\n')),(0,o.kt)("h2",{id:"step-7-close-the-connection"},"Step 7: Close the Connection"),(0,o.kt)("p",null,"Finally, we can close the connection using the close() function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"close(new_socket);\n")),(0,o.kt)("p",null,'The above code snippet will create a simple webserver that listens on port 8080, accepts incoming connections and sends "Hello World" as response.'),(0,o.kt)("p",null,"Note that this is a basic example and should be used for learning and testing purposes only. A production-ready webserver would require additional error handling and security measures."),(0,o.kt)("h2",{id:"final-result"},"Final Result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\n#define PORT 8080\n#define MAX_CONNECTIONS 5\n\nint main(int argc, char const *argv[]) {\n    int server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    struct sockaddr_in address;\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons( PORT );\n    bind(server_fd, (struct sockaddr *)&address, sizeof(address));\n    listen(server_fd, MAX_CONNECTIONS);\n    int addrlen = sizeof(address);\n    int new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);\n    char *hello = "Hello World";\n    send(new_socket , hello , strlen(hello) , 0);\n    close(new_socket);\n\n    return 0;\n}\n')))}u.isMDXComponent=!0}}]);