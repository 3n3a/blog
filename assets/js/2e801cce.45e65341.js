"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9450],{6029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/node-express-hallo-welt","metadata":{"permalink":"/node-express-hallo-welt","editUrl":"https://github.com/3n3a/blog/tree/master/blog/node-express-hallo-welt.md","source":"@site/blog/node-express-hallo-welt.md","title":"Ein JavaScript-Webserver mit Express.js implementieren","description":"Ein JavaScript-Webserver mit Express.js zu implementieren ist einfach und schnell. Express.js ist ein leichtgewichtiges Framework f\xfcr Node.js, das es Entwicklern erm\xf6glicht, einen Webserver zu erstellen und zu verwalten. In diesem Essay werden wir Schritt f\xfcr Schritt durch den Prozess gehen, um einen einfachen Webserver mit Express.js zu erstellen.","date":"2023-01-16T13:42:00.000Z","formattedDate":"January 16, 2023","tags":[{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"node-js","permalink":"/tags/node-js"},{"label":"express-js","permalink":"/tags/express-js"}],"readingTime":2.455,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"title":"Ein JavaScript-Webserver mit Express.js implementieren","date":"2023-01-16T13:42:00.000Z","draft":false,"authors":"enk","tags":["tutorial","node-js","express-js"]},"nextItem":{"title":"Create a Blog with Phoenix in Elixir.","permalink":"/phoenix_blog_tutorial"}},"content":"Ein JavaScript-Webserver mit Express.js zu implementieren ist einfach und schnell. Express.js ist ein leichtgewichtiges Framework f\xfcr Node.js, das es Entwicklern erm\xf6glicht, einen Webserver zu erstellen und zu verwalten. In diesem Essay werden wir Schritt f\xfcr Schritt durch den Prozess gehen, um einen einfachen Webserver mit Express.js zu erstellen.\\n\\n\x3c!--truncate--\x3e\\n\\n## Schritt 1: Node.js installieren\\n\\nDer erste Schritt bei der Implementierung eines Webservers mit Express.js ist die Installation von Node.js. Node.js ist eine JavaScript-Laufzeitumgebung, die es erm\xf6glicht, JavaScript-Code auf dem Server auszuf\xfchren. Wenn Sie Node.js noch nicht auf Ihrem Computer installiert haben, k\xf6nnen Sie es von der offiziellen Node.js-Website herunterladen und installieren.\\n\\n\\n## Schritt 2: Projekt erstellen\\n\\nNachdem Node.js installiert ist, k\xf6nnen Sie mit dem n\xe4chsten Schritt fortfahren, dem Erstellen eines neuen Projekts. Erstellen Sie ein neues Verzeichnis f\xfcr Ihr Projekt und wechseln Sie in dieses Verzeichnis. \xd6ffnen Sie dann eine Kommandozeile oder eine Eingabeaufforderung und geben Sie den Befehl npm init ein. Dieser Befehl erstellt eine \\"package.json\\"-Datei, die die Abh\xe4ngigkeiten und andere Informationen Ihres Projekts enth\xe4lt. Folgen Sie den Anweisungen auf dem Bildschirm, um die Datei zu erstellen.\\n\\n## Schritt 3: Express.js installieren\\n\\nNun k\xf6nnen Sie Express.js installieren, indem Sie den Befehl npm install express auf der Kommandozeile eingeben. Dieser Befehl installiert das Express.js-Modul und alle seine Abh\xe4ngigkeiten in Ihrem Projekt.\\n\\n\\n## Schritt 4: Code schreiben\\n\\nNach der Installation von Express.js k\xf6nnen Sie mit dem Schreiben des Codes f\xfcr Ihren Webserver beginnen. Erstellen Sie eine neue Datei mit dem Namen \\"server.js\\" im Root-Verzeichnis Ihres Projekts. \xd6ffnen Sie diese Datei in einem Texteditor Ihrer Wahl und f\xfcgen Sie den folgenden Code hinzu:\\n\\n```js\\nconst express = require(\'express\');\\nconst app = express();\\n\\napp.get(\'/\', function(req, res){\\n    res.send(\'Hallo Welt!\');\\n});\\n\\napp.listen(3000, function(){\\nconsole.log(\'Der Server l\xe4uft auf Port 3000\');\\n});\\n```\\n\\nDieser Code erstellt eine neue Express-Anwendung und legt einen GET-Endpunkt f\xfcr die Root-Route fest. Jedes Mal, wenn ein Benutzer die URL Ihres Servers aufruft, wird die angegebene Funktion ausgef\xfchrt und der Text \\"Hallo Welt!\\" an den Benutzer zur\xfcckgegeben. Der letzte Befehl in diesem Code, `app.listen(3000, function(){...})`, sagt dem Server, dass er auf Port 3000 auf Anfragen lauschen soll.\\n\\n## Schritt 5: Server starten\\nJetzt k\xf6nnen Sie Ihren Server starten, indem Sie den Befehl `node server.js` in der Kommandozeile ausf\xfchren. Wenn alles erfolgreich eingerichtet wurde, sollte die Ausgabe \\"Der Server l\xe4uft auf Port 3000\\" im Terminal erscheinen. Sie k\xf6nnen nun die URL \\"http://localhost:3000\\" in Ihrem Browser aufrufen und sollten den Text \\"Hallo Welt!\\" sehen.\\n\\nMit Express.js k\xf6nnen Sie auch weitere Routen und Funktionalit\xe4ten hinzuf\xfcgen, wie z.B. das Verarbeiten von Formulardaten, das Verwalten von Sitzungen und Cookies und das Arbeiten mit Datenbanken. Es gibt viele Ressourcen im Internet, die Ihnen helfen, Ihren Wissensstand in Bezug auf Express.js und Node.js zu vertiefen.\\n\\nIn Zusammenfassung, Express.js ist ein m\xe4chtiges Framework f\xfcr Node.js, das es Entwicklern erm\xf6glicht, einen Webserver schnell und einfach zu erstellen. Durch die Schritte, die in diesem Essay beschrieben wurden, k\xf6nnen Sie jetzt Ihren eigenen einfachen Webserver mit Express.js implementieren und darauf aufbauen, um weitere Funktionalit\xe4ten hinzuzuf\xfcgen."},{"id":"/phoenix_blog_tutorial","metadata":{"permalink":"/phoenix_blog_tutorial","editUrl":"https://github.com/3n3a/blog/tree/master/blog/phoenix_blog_tutorial.md","source":"@site/blog/phoenix_blog_tutorial.md","title":"Create a Blog with Phoenix in Elixir.","description":"In this Tutorial you will learn how to setup a Phoenix Project and the database.","date":"2022-07-16T13:42:00.000Z","formattedDate":"July 16, 2022","tags":[{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"phoenix","permalink":"/tags/phoenix"},{"label":"elixir","permalink":"/tags/elixir"},{"label":"webframework","permalink":"/tags/webframework"}],"readingTime":1.525,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"title":"Create a Blog with Phoenix in Elixir.","date":"2022-07-16T13:42:00.000Z","draft":false,"authors":"enk","tags":["tutorial","phoenix","elixir","webframework"]},"prevItem":{"title":"Ein JavaScript-Webserver mit Express.js implementieren","permalink":"/node-express-hallo-welt"},"nextItem":{"title":"A Guide to Creating a \\"Hello World\\" Webserver in C","permalink":"/webserver-c"}},"content":"In this Tutorial you will learn how to setup a Phoenix Project and the database.\\nYou\'ll also learn how to use Phoenix amd create a simple Blog, but there\'s also a section about the final\\nDeployment of your Phoenix Blog. \\n\\n\x3c!--truncate--\x3e\\n\\n> You should already have installed Erlang 22 or later, with Elixir 1.12 or later. Also the Hex Package manager should be installed (`mix local.hex`) and also `phx_new` (`mix archive.install hex phx_new`) \\n> \\n> *[Source](https://hexdocs.pm/phoenix/installation.html)* \\n\\n\\n:::warning \\n**Linux Users**: If you want live-reload to work in your Dev-Environment be sure to install [inotify-tools](https://github.com/inotify-tools/inotify-tools/wiki) \\n\\n::: \\n\\n## Create the Application \\n\\n```bash \\nmix phx.new <name/folder> --database postgres --no-mailer \\n``` \\n\\n`name` is a placeholder for the Name of your Application. It generates the new bootstrapped application in a folder with that name and names the main module after it. \\n\\n`--database` selects the database you want to use in your Application, in our case Postgres, which is also the recommended DB by the Team behind Phoenix. \\n\\nFinally `--no-mailer` excludes the Email-Sending component from being generated. \\n\\n*[Source](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.New.html)* \\n\\n## Setup Database \\n\\nSince it\u2018s so simple to setup a Postgres Database in our Dev-Environment with Docker, I have written this config, which comes with Pgadmin a Postgres Web Admin UI. \\n\\n[See here for mor Info](https://github.com/3n3a/docker-compose-templates/tree/master/postgres-database) \\n\\nSimply copy the contents of that Folder into your project and run your Database. \\n\\n## Initialize Database \\n\\n\\n:::warning \\nDatabase needs to be running for this \\n\\n::: \\n\\nRun `mix ecto.create` which will configure the Database specified in the config file `config/dev.exs`. \\n\\n*[Source](https://hexdocs.pm/phoenix/up_and_running.html)* \\n\\n## Start Server \\n\\nRun either of those commands to start the Development server. \\n\\n```bash \\nmix phx.server \\n``` \\n\\nOr run the server inside of Interactive Elixir \\n\\n```bash \\niex -S mix phx.server \\n``` \\n\\n\\n:::info \\nYour Phoenix Application should now be running at [http://127.0.0.1:4000](http://127.0.0.1:4000/) \\n\\n::: \\n\\nIf you can see this picture you have yourself a working Phoenix Application. \\n\\n![](/img/A9AB9B55-9E9D-4031-BDD5-847C6D291A43.png)\\n\\n*[Source](https://hexdocs.pm/phoenix/up_and_running.html)*"},{"id":"/webserver-c","metadata":{"permalink":"/webserver-c","editUrl":"https://github.com/3n3a/blog/tree/master/blog/webserver-c.md","source":"@site/blog/webserver-c.md","title":"A Guide to Creating a \\"Hello World\\" Webserver in C","description":"Creating a basic webserver in C is a relatively straightforward process. In this guide, we will walk through the steps of setting up a simple webserver that will output the message \\"Hello World\\" in plain text.","date":"2022-01-16T13:42:00.000Z","formattedDate":"January 16, 2022","tags":[{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"c","permalink":"/tags/c"},{"label":"webserver","permalink":"/tags/webserver"}],"readingTime":2.425,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"title":"A Guide to Creating a \\"Hello World\\" Webserver in C","date":"2022-01-16T13:42:00.000Z","draft":false,"authors":"enk","tags":["tutorial","c","webserver"]},"prevItem":{"title":"Create a Blog with Phoenix in Elixir.","permalink":"/phoenix_blog_tutorial"},"nextItem":{"title":"Hackernews Client with Hackerfeed API","permalink":"/hackernews_client"}},"content":"Creating a basic webserver in C is a relatively straightforward process. In this guide, we will walk through the steps of setting up a simple webserver that will output the message \\"Hello World\\" in plain text.\\n\\n\x3c!--truncate--\x3e\\n\\n## Step 1: Import Required Libraries\\n\\nTo begin, we will need to import the necessary libraries for our webserver. The most commonly used libraries for creating a webserver in C are socket.h and netinet/in.h. These libraries provide the necessary functions for creating and managing network connections.\\n\\n```c\\n#include <stdio.h>\\n#include <string.h>\\n#include <sys/socket.h>\\n#include <netinet/in.h>\\n```\\n\\n## Step 2: Define Constants\\n\\nNext, we will define some constants that will be used throughout our program. These include the port number that our webserver will listen on, as well as the maximum number of incoming connections that can be queued.\\n\\n```c\\n#define PORT 8080\\n#define MAX_CONNECTIONS 5\\n```\\n\\n#3 Step 3: Create the Server Socket\\n\\nNow we will create the server socket that will be used to listen for incoming connections. The socket() function is used to create a new socket, and the bind() function is used to associate the socket with a specific port number.\\n\\n```c\\nint server_fd = socket(AF_INET, SOCK_STREAM, 0);\\nstruct sockaddr_in address;\\naddress.sin_family = AF_INET;\\naddress.sin_addr.s_addr = INADDR_ANY;\\naddress.sin_port = htons( PORT );\\nbind(server_fd, (struct sockaddr *)&address, sizeof(address));\\n```\\n\\n## Step 4: Listen for Incoming Connections\\n\\nWith our server socket created, we can now listen for incoming connections using the listen() function.\\n\\n```c\\nlisten(server_fd, MAX_CONNECTIONS);\\n```\\n\\n## Step 5: Accept Incoming Connections\\n\\nOnce we have begun listening for connections, we can use the accept() function to accept incoming connections and create a new socket for communicating with the client.\\n\\n```c\\nint addrlen = sizeof(address);\\nint new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);\\n```\\n\\n## Step 6: Send the \\"Hello World\\" Response\\n\\nWith our connection established, we can now send the \\"Hello World\\" response to the client using the send() function.\\n\\n```c\\nchar *hello = \\"Hello World\\";\\nsend(new_socket , hello , strlen(hello) , 0 );\\n```\\n\\n## Step 7: Close the Connection\\n\\nFinally, we can close the connection using the close() function.\\n\\n```c\\nclose(new_socket);\\n```\\n\\nThe above code snippet will create a simple webserver that listens on port 8080, accepts incoming connections and sends \\"Hello World\\" as response.\\n\\nNote that this is a basic example and should be used for learning and testing purposes only. A production-ready webserver would require additional error handling and security measures.\\n\\n## Final Result\\n\\n```c\\n#include <stdio.h>\\n#include <string.h>\\n#include <sys/socket.h>\\n#include <netinet/in.h>\\n\\n#define PORT 8080\\n#define MAX_CONNECTIONS 5\\n\\nint main(int argc, char const *argv[]) {\\n    int server_fd = socket(AF_INET, SOCK_STREAM, 0);\\n    struct sockaddr_in address;\\n    address.sin_family = AF_INET;\\n    address.sin_addr.s_addr = INADDR_ANY;\\n    address.sin_port = htons( PORT );\\n    bind(server_fd, (struct sockaddr *)&address, sizeof(address));\\n    listen(server_fd, MAX_CONNECTIONS);\\n    int addrlen = sizeof(address);\\n    int new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);\\n    char *hello = \\"Hello World\\";\\n    send(new_socket , hello , strlen(hello) , 0);\\n    close(new_socket);\\n\\n    return 0;\\n}\\n```"},{"id":"/hackernews_client","metadata":{"permalink":"/hackernews_client","editUrl":"https://github.com/3n3a/blog/tree/master/blog/hackernews_client.md","source":"@site/blog/hackernews_client.md","title":"Hackernews Client with Hackerfeed API","description":"My idea was to develop a hackernews client, I know so many others exist already. But I wanted to try for myself.","date":"2021-08-11T16:00:00.000Z","formattedDate":"August 11, 2021","tags":[{"label":"hackernews","permalink":"/tags/hackernews"},{"label":"api","permalink":"/tags/api"}],"readingTime":0.885,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"title":"Hackernews Client with Hackerfeed API","date":"2021-08-11T16:00:00.000Z","draft":false,"authors":"enk","tags":["hackernews","api"]},"prevItem":{"title":"A Guide to Creating a \\"Hello World\\" Webserver in C","permalink":"/webserver-c"},"nextItem":{"title":"Interview Kol Deda, Autor","permalink":"/interview_kol_deda"}},"content":"My idea was to develop a hackernews client, I know so many others exist already. But I wanted to try for myself.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nI started out by finding an API that would allow me to lean back and relax. This API is called [hackerfeed.dev](https://hackerfeed.dev), I believe to have found it on hackernews.\\r\\n\\r\\nAfterwards I moved onto designing the Frontend, for this I wanted to use pre-made bootstrap components. For that I used MDBootstrap, a Framework that combines Material, from Google and Bootstrap into one capitalistic creation.\\r\\n\\r\\n![](https://ik.imagekit.io/njhey0rxzni/code_snippets/A1AF7D3E-67E1-4D94-BE20-8D9FEF870C1F_KG4KPathGn.png?updatedAt=1628745888583&tr=w-1104,h-736,fo-auto)\\r\\n\\r\\n_A code snippet from the index.html. The classes correspond to MDBootstrap_\\r\\n\\r\\n## Final Result\\r\\n\\r\\nThe result can be seen [here](https://gh.3n3a.ch/hnfee_mdb/). It doesn\u2019t work aswell as I wanted it to. But upon preloding the API response times got a little bit better. \\r\\n\\r\\n## Reflection\\r\\n\\r\\nFor another project I would want to better know about fetching API responses from load or background fetching. Maybe even with a service worker.\\r\\n\\r\\nAlso I wouldn\u2018t use MDBootstrap again, first of all, because it\u2019s not free and secondarily because I like Tailwind and co more :)."},{"id":"/interview_kol_deda","metadata":{"permalink":"/interview_kol_deda","editUrl":"https://github.com/3n3a/blog/tree/master/blog/interview_kol_deda/index.mdx","source":"@site/blog/interview_kol_deda/index.mdx","title":"Interview Kol Deda, Autor","description":"","date":"2021-04-13T11:50:16.000Z","formattedDate":"April 13, 2021","tags":[{"label":"interview","permalink":"/tags/interview"},{"label":"poetry","permalink":"/tags/poetry"}],"readingTime":3.035,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"title":"Interview Kol Deda, Autor","date":"2021-04-13T11:50:16.000Z","draft":false,"authors":"enk","tags":["interview","poetry"]},"prevItem":{"title":"Hackernews Client with Hackerfeed API","permalink":"/hackernews_client"},"nextItem":{"title":"Honeypot Cowrie Maturaarbeit","permalink":"/honeypot-cowrie-maturaarbeit"}},"content":"import ReactAudioPlayer from \'react-audio-player\';\\r\\n\\r\\nMein Name ist Enea Kr\xe4henb\xfchl und heute habe ich Kol Deda als Gast bei mir.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\nEr ist ein neu-aufkommender Autor und hat vor kurzer Zeit seinen ersten Gedichtband Kalte Reise ver\xf6ffentlicht.\\r\\n\\r\\nDieser Band verkaufte sich nach kurzer Zeit schon sehr gut, weshalb ich mal mit dem Autor reden wollte, um herauszufinden, wer eigentlich hinter diesem Werk steckt.\\r\\n\\r\\n![Kalte Reise Buch](https://koldeda.ch/images/kaltereise.jpg)\\r\\n\\r\\n---\\r\\n\\r\\n<ReactAudioPlayer\\r\\n  src=\\"/audio/koldeda_interview.mp3\\"\\r\\n  controls\\r\\n/>\\r\\n\\r\\n_Guten Tag Herr Deda, wie geht es Ihnen so?_\\r\\n\\r\\n**Also mir geht es im Moment ganz gut, und Ihnen?**\\r\\n\\r\\n_Mir geht\u2019s auch gut. Also fangen wir mal an: Erz\xe4hlen Sie mal \xfcber sich selbst._\\r\\n\\r\\n**Ich wurde am 14. Juni 2002 in Luzern geboren. Derzeit besuche ich die Kantonsschule Alpenquai in Luzern und nat\xfcrlich hoffe ich, dass ich viele Leute mit meiner kreativen Arbeit erreichen kann.**\\r\\n\\r\\n_Wann haben Sie angefangen Gedichte zu schreiben? Und wieso haben Sie angefangen?_\\r\\n\\r\\n**Ich habe im Fr\xfchjahr 2020 angefangen Gedichte zu schreiben, mit dem Ziel, eines Tages einen Gedichtband zu ver\xf6ffentlichen. Ich hatte eigentlich schon immer ein Interesse an der Literatur und wollte, seitdem ich sehr jung war, mal ein eigenes literarisches Werk publizieren. Dieser Gedanke liess mich einfach nie los. Zuerst wollte ich einen Roman verfassen aber ich habe kurz darauf realisiert, dass mir dieser Schreibstil einfach nicht gut genug passt. So kam ich zur Lyrik, denn in Gedichten braucht es keine Einleitung, es braucht keinen 200-seitigen Fliesstext um etwas zu erz\xe4hlen; man kann in der Lyrik schon in der ersten Zeile direkt in das Erz\xe4hlte/Beschriebene eintauchen.**\\r\\n\\r\\n_Wie waren denn ihre Anf\xe4nge so, als Lyriker?_\\r\\n\\r\\n**Also ich denke, dass es falsch w\xe4re \xfcber meine \\"Anf\xe4nge\\" so r\xfcckblickend zu erz\xe4hlen - denn derzeit bin ich noch immer am Anfang.**\\r\\n\\r\\n**Aber um Ihre Frage zu beantworten: Anfangs muss man viel Lyrik lesen; das ist einfach so. Man muss sich \xfcber - ich sag\u2019s mal so - die Szene schlaumachen. Wer waren ber\xfchmte Lyriker? Was schrieben sie? Wie haben sie geschrieben? Und - ganz wichtig - wie sieht die Lyriklandschaft denn eigentlich heute aus?**\\r\\n\\r\\n**Lyrik zu lesen hat nicht nur einen informativen Zweck, sondern es ist auch eine Quelle, aus der man Inspiration holt.**\\r\\n\\r\\n_Hatten Sie anfangs Probleme mit dem Eintauchen in dieser Welt?_\\r\\n\\r\\n**Ja, nat\xfcrlich; anfangs gibt es immer Schwierigkeiten. Aber man kommt schon schnell hinein.**\\r\\n\\r\\n**Man muss einfach eine Leidenschaft f\xfcr so etwas haben.**\\r\\n\\r\\n_Erz\xe4hlen Sie mir mal \xfcber Ihr Werk Kalte Reise._\\r\\n\\r\\n**Die Idee dahinter war, eine Geschichte durch den Modus der Lyrik zu erz\xe4hlen. Eine dreiteilige Geschichte, in der es darum geht, wie eine idyllische Welt zusammen mit der Form der Gedichte zerf\xe4llt.**\\r\\n\\r\\n**Im ersten Teil ist die Sprache noch \\"ganz\\": Die Gedichte klingen harmonisch und befinden sich in einer recht strengen Form. Ab dem zweiten Teil f\xe4ngt aber die Form an zu zerbrechen: Die Reime/Assonanzen fehlen, der Rhythmus verschwindet sowie weiteres. Somit verl\xe4uft der Zerfall der Form gleichzeitig mit dem Zerfall der beschriebenen Welt und auch gleichzeitig mit dem Zerfall des mentalen Zustandes des lyrischen Ichs.**\\r\\n\\r\\n_Was hat Sie dazu inspiriert?_\\r\\n\\r\\n**Ein Triptychon von Hieronymus Bosch: Der Heuwagen. Sie sollten mal einen Blick darauf werfen, dann wissen Sie was ich meine.**\\r\\n\\r\\n_Sie haben oben erw\xe4hnt, dass das \\"Lyriklesen\\" eine Quelle der Inspiration sei. Welche Lyriker*innen haben Sie inspiriert?_\\r\\n\\r\\n**Also ganz klar Goethe und Heinrich Heine. Ich hab w\xe4hrend dem Schreiben viel \\"alte\\" Lyrik gelesen. Von Heine habe ich sogar ein Gedicht ein wenig bearbeitet und direkt in meinem Band aufgenommen. Aber auch Steffen Popp und Jan Wagner, zwei kontempor\xe4re Lyriker. Dessen Werke sind sehr inspirierend.**\\r\\n\\r\\n_Ich danke Kol Deda f\xfcr seine aufschlussreichen Antworten. Sein Deb\xfctwerk Kalte Reise hat er eigenst\xe4ndig ver\xf6ffentlicht und man kann es auf seiner Homepage kaufen:_\\r\\n\\r\\n[koldeda.ch](https://koldeda.ch)"},{"id":"honeypot-cowrie-maturaarbeit","metadata":{"permalink":"/honeypot-cowrie-maturaarbeit","editUrl":"https://github.com/3n3a/blog/tree/master/blog/2021-08-08-maturaarbeit/index.md","source":"@site/blog/2021-08-08-maturaarbeit/index.md","title":"Honeypot Cowrie Maturaarbeit","description":"Eine Maturaarbeit \xfcber die Installation eines SSH Honeypots auf AWS und der subsequenten Analyse der gesammelten Daten.","date":"2021-03-19T09:25:38.000Z","formattedDate":"March 19, 2021","tags":[{"label":"honeypot","permalink":"/tags/honeypot"},{"label":"maturaarbeit","permalink":"/tags/maturaarbeit"},{"label":"academic work","permalink":"/tags/academic-work"}],"readingTime":26.545,"hasTruncateMarker":true,"authors":[{"name":"Enea Kr\xe4henb\xfchl","title":"Software Developer","url":"https://3n3a.ch","imageURL":"img/favicon.ico","key":"enk"}],"frontMatter":{"slug":"honeypot-cowrie-maturaarbeit","title":"Honeypot Cowrie Maturaarbeit","date":"2021-03-19T09:25:38.000Z","draft":false,"authors":"enk","tags":["honeypot","maturaarbeit","academic work"]},"prevItem":{"title":"Interview Kol Deda, Autor","permalink":"/interview_kol_deda"}},"content":"Eine Maturaarbeit \xfcber die Installation eines SSH Honeypots auf AWS und der subsequenten Analyse der gesammelten Daten.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nEinleitung und Fragestellung\\n============================\\n\\nDie Idee zum Einstieg ins Themenfeld von Cyber-Sicherheit bekam ich beim\\nlesen eines Tweets, welcher dazu f\xfchrte, dass ich im Internet nachlas,\\nwas denn Cyber-Sicherheit \xfcberhaupt ist, und welche verschiedenen\\nThemenfelder existieren. Ein Artikel in der Neuen Z\xfcrcher Zeitung,\\ngeschrieben von M\xe4der [^1], hat mich \xfcberzeugt, in meiner Arbeit den Fokus\\ndefinitiv auf die Cyber-Sicherheit zu legen. Der Artikel handelt von\\nHacker-Angriffen auf Spit\xe4ler. Angesichts zunehmender Home-Office-Arbeit\\nwegen der Pandemie interessiert mich die Frage, unter welchen\\nSicherheitsbestimmungen zuhause beruflich gearbeitet wird. Dies bedeutet\\nf\xfcr einen Sicherheitsverantwortlichen bei einer Organisation die\\nBereitstellung eines VPN- oder RDP-Zugangs. Denn die Arbeitnehmer m\xfcssen\\nnaturgem\xe4ss dauernd Zugriff auf firmeneigene Netzwerke haben.\\n\\nDie vorliegende Arbeit handelt von Cyber-Sicherheit, im Spezifischen von\\nHoneypots. Hierzu wird der Honeypot Cowrie auf dem EC2 Cloud Server von\\nAWS installiert, um f\xfcr insgesamt einen Monat Daten zu sammeln. Diese\\ngesammelten Daten werden mit Hilfe einer selbst programmierten Webapp\\nanalysiert und visualisiert. Die Analyse dient der Beantwortung der\\nLeitfrage. Die Kombination von Honeypot und Webapp f\xfchrt zu einem\\nProdukt, welches auf einem Raspberry-Pi l\xe4uft. Das Ziel des Produktes\\nist es, Laien, welche ein Interesse an den Methoden eines Hackers haben,\\nein Sprungbrett in die Cyber-Sicherheit zu verschaffen.\\n\\nDie Analyse der vom Honeypot gesammelten Daten sowie auch die\\ndazugeh\xf6rigen Visualisierungen sind Gegenstand der vorliegenden Arbeit\\nmit folgender Leitfrage:\\n\\n-   \\"Ist ein Honeypot mit Webapp eine effektive Methode zum pr\xe4ventiven\\n    Schutz eines Heimnetzwerkes?\\"\\n\\nNachforschungen in Literatur\\n============================\\n\\nCybersecurity \xdcbersicht\\n-----------------------\\n\\nDer Begriff Cyber-Sicherheit umfasst eine Reihe von verschiedenen\\nAspekten wie die Informationssicherheit, Applikationssicherheit,\\nNetzwerksicherheit und die Operationssicherheit.\\n\\nIm Jahr 2019 wurden laut Risk Based Security [^2] \xfcber 15.1 Milliarden pers\xf6nliche\\nDatensets aufgrund von Datenlecks exponiert. Nach dem Rekordjahr 2019 ist die\\nSicherheit von Netzwerken noch wichtiger als zuvor. Es wird vermutet,\\ndass im Jahr 2020 die Anzahl der Cyber-Attacken weiter zunehmen werden.\\n\\nF\xfcr Unternehmen sind Honeypots ein wichtiger Bestandteil der\\nIdentifizierung von potenziellen Angreifern. Denn Unternehmen k\xf6nnen mit\\nDaten, die sie von einem Honeypot kriegen, eine Struktur auflegen,\\nwelche das Vorgehen eines Angreifers aufzeigt. Diese Struktur mit dem\\nNamen \\"Cyber Kill Chain\\", wird von Lockheed Martin [^3] entwickelt, ein globales\\nUnternehmen f\xfcr Sicherheit und Luft- und Raumfahrt.\\n\\n### Netzwerksicherheit\\n\\nDie Netzwerksicherheit ist nach Kaspersky [^4] eine Methode zur Absicherung eines\\nNetzwerks. Der Honeypot geh\xf6rt zum Umfeld der Netzwerksicherheit, da er\\nbei der Erkennung eines Hackers und dessen Methoden eine Hilfe ist. Ein\\nHoneypot selber sch\xfctzt nicht. Er ist ein Mittel, das Informationen\\nliefert. Mit Hilfe dieser Informationen wird ein Netzwerk danach\\nabgesichert.\\n\\nBegriffserkl\xe4rungen\\n===================\\n\\nCyber Kill Chain\\n----------------\\n\\nUm die Abfolge eines Cyber-Angriffes zu beschreiben, hat Lockheed Martin\\nden Cyber Kill Chain Lockheed Martin [^5] entwickelt. Dieser soll eine\\nGrundlage darstellen, um einen Cyber-Angriff mit mehreren Etappen zu\\nbeschreiben. Nach Schmitz [^6] sind die Etappen, welche ein Angreifer\\ntypischerweise durchl\xe4uft, die folgenden:\\n\\n-   **Identifizierung des Zieles:** Der Angreifer sucht \xf6ffentlich \xfcber\\n    das Ziel verf\xfcgbare Informationen wie E-Mail-Adressen, Informationen\\n    \xfcber das Unternehmen und dessen IT-Systeme.\\n\\n-   **Pr\xe4paration des Angriffs:** Die passenden Angriffswerkzeuge werden\\n    zusammengestellt. Oft bestehen diese aus einem\\n    Exploit und\\n    einer Malware.\\n\\n-   **Beginn des Angriffs:** Der Angriff wird gestartet und das\\n    Malware-Exploit-Paket wird je nach Angreifbarkeit mit Hilfe eines\\n    USB-Sticks, eines Social-Media-Posts oder einer infizierten Website\\n    ausgeliefert.\\n\\n-   **Zugriff auf Opfer:** Eine Schwachstelle wird ausgenutzt um Zugriff\\n    auf den Computer eines Opfers zu bekommen. Diese Schwachstelle kann\\n    in einer Software existieren. Eine andere Schwachstelle kann auch\\n    ein Mitarbeiter sein. Der mit Hilfe von\\n    Social Engineering dazu bewogen worden ist, eine\\n    b\xf6swillige Software auszuf\xfchren.\\n\\n-   **Br\xfcckenkopf wird errichtet:** Der Angreifer\\n    installiert eine Backdoor und versteckt\\n    Malware im\\n    Computersystem des Opfers.\\n\\n-   **Command and Control (C2):** Um die\\n    Malware aus\\n    der Ferne zu bedienen, h\xe4lt der Angreifer Ausschau nach m\xf6glichen\\n    Kommunikationskan\xe4len. Diese werden ge\xf6ffnet und anschliessend wird\\n    das System gesteuert. Welches des \xd6fteren unter Verwendung von\\n    abl\xe4uft.\\n\\n-   **Ziel der Mission erreichen:** Ein Angreifer hat etwas vor. Es\\n    existiert ein Ziel. Dieses Ziel will nun nach den obgenannten\\n    Schritten erreicht werden. Ein Ziel kann es sein, das Netzwerk\\n    auszul\xf6schen oder vertrauliche Daten darin zu finden.\\n\\nSSH (Secure Shell Protocol)\\n---------------------------\\n\\nSSH oder auch Secure Shell Server ist ein Netzwerkprotokoll, mit dem man\\nauf die Konsole, das Text In/Output Feld, womit der Computer gesteuert\\nwird, zugreift. Die Funktion des SSH-Protokolls oder eher des\\n\\"Tochterprotokolls\\" namens Secure-File-Transfer-Protokoll, besteht\\ndarin, Dateien \xfcber ein Netzwerk zu transferieren, sei dies lokal oder\\n\xfcber das World-Wide-Web.\\n\\nHoneypot\\n--------\\n\\nEin Honeypot - oder in Deutsch Honigtopf - ist eine Falle, die man in\\nder Computersicherheitsindustrie benutzt, um Angreifer mit einem System\\nabzulenken das nur so scheint als w\xe4re es \\"the real deal\\". Dieses\\nSystem wird oftmals in einer virtuellen Umgebung aufgesetzt, denn falls\\nein Angreifer etwas anrichtet, was zum \\"Tode\\" des Systems f\xfchren\\nw\xfcrde, kann man dieses einfach auf einen Punkt vor dem Zwischenfall\\nzur\xfccksetzen. Der Name Honeypot hat seinen Ursprung in der Strategie,\\nB\xe4ren mit Hilfe von Honigt\xf6pfen als K\xf6der abzulenken und zu\\nbesch\xe4ftigen, so dass sie ihren eigentlichen Plan vergessen.\\n[^7]\\n\\nIn der Welt der Computersicherheit gibt es verschiedene Honeypots. Auf\\nder einen Seite gibt es Server-seitige Honeypots. Das sind Honeypots,\\nwelche auf dem Server als Falle existieren und jegliche Angriffe\\naufzeichnen. Auf der anderen Seite gibt es Client-seitige Honeypots. Das\\nsind Honeypots, die sich als Benutzer wie z.B. in der Form eines\\nBrowsers ausgeben und Daten \xfcber Websites sammeln, welche den Benutzer\\nanzugreifen versuchen. [^8]\\n\\nNach `ionos.de` [^8] gibt es zwei\\nverschiedene Weisen, Honeypots zu implementieren. Zum einen passiert\\ndies auf einem physischen Rechner, zum anderen in virtueller Form wie\\nz.B. mit (Quick Emulator).\\n\\nStufen von Interaktivit\xe4t\\n-------------------------\\n\\nEinfacheitshalber werden nachfolgend nur die Server Honeypots\\nbeschrieben, da diese in der vorliegenden Arbeit ein Thema bilden\\nwerden. Auf die Client-seitigen Honeypots wird nicht eingegangen.\\n\\n-   **Low-Interaction-Honeypots\\\\\\n    ** Diese Art von Honeypots wird gem\xe4ss Hoopes [^9] oft benutzt, um Virusproben zu sammeln. Dieser Honeypot\\n    ist einer, welcher der Sammlung von Viren dient, zugleich auch\\n    andere Verwendungendungsf\xe4lle hat. Die praktische Implementierung\\n    eines Low-Interaction-Honeypots ist einfach im Vergleich zu der von\\n    anderen Honeypots mit h\xf6heren Interaktivit\xe4ts-Graden.\\n\\n-   **Mid-Interaction-Honeypots\\\\\\n    ** Medium-Interaction-Honeypots stellen nach\\n    Lance [^10] mehr M\xf6glichkeiten in\\n    Form von Interaktivit\xe4t, zur Verf\xfcgung, als\\n    Low-Interaction-Honeypots. Diese Art von Honeypots werden\\n    \xfcblicherweise in Unternehmensumgebungen implementiert. Die\\n    Medium-Interaction-Form kommt dann in Frage, wenn ein Honeypot\\n    relativ kosteng\xfcnstig sein soll. Das bedeutet konkret, dass ein\\n    solcher Honeypot fortlaufend betrieben wird.\\n\\n-   **High-Interaction-Honeypots\\\\\\n    ** Ein High-Interaction-Honeypot ist im Grunde ein echtes System,\\n    das sowohl in einer virtuellen als auch in einer physischen Umgebung\\n    ausgesetzt wird. Hier besteht die hohe Gefahr, dass ein Angriff auf\\n    wichtige Systeme erfolgt wie z.B. die Website eines Unternehmens.\\n    Diese Gefahr besteht, wenn das angreifbare System nicht gut genug\\n    abgeschirmt sind vom Rest. D.h. es ist unerl\xe4sslich, solche Systeme\\n    vom Rest einer Organisation oder eines privaten Netzwerks\\n    abzuschirmen, wie auf `ionos.de` [^8]\\n    zu entnehmen ist.\\n\\nVerschiedene Honeypots\\n----------------------\\n\\n### Glastopf\\n\\nGlastopf ist ein Low-Interaction-Honeypot, der Webapp-Schwachstellen\\nnachahmt. Dieser Honeypot ist einer der bekanntesten\\nWeb-Applikations-Honeypots. Was diesen Honeypot speziell macht, ist sein\\nAnsatz. Denn er ist anders als jener von gleichwertigen Produkten.\\nGlastopf emuliert eine Website. Diese schaut aus der Perspektive eines\\nAngreifers wie eine Website aus, die angreifbar ist. Hinter den Kulissen\\naber wird die Website mit den Sicherheitsl\xfccken von allen vorherigen,\\nvon Hackern angegriffenen, Websites ausgestattet.\\n\\n### Mailoney\\n\\nMailoney von awhitehatter [^11] ist ein Low-Interaction-SMTP-Honeypot,\\ngeschrieben in Python. Der Honeypot emuliert SMTP. Dabei\\nhandelt es sich um das Protokoll, welches benutzt wird zur Versendung\\nvon E-Mails. Mailoney hilft beim Identifizieren der Quelle von\\nSpam-E-Mails. [^11]\\n\\nCowrie SSH Honeypot\\n-------------------\\n\\nDer Cowrie Honeypot von Osterheim [^12], eine Fork von Kippo, ist ein\\nMedium- zu High-Interaction-SSH und Telnet-Honeypot. Cowrie speichert\\nsowohl Logindaten von Angreifern als auch die Befehle, welche ausgef\xfchrt\\nwurden. Hochgeladene Dateien werden ebenfalls gespeichert und zur\\nsp\xe4teren Analyse bereitgestellt. Die High-Interaction-Funktionalit\xe4t des\\nHoneypots erm\xf6glicht es dem Nutzer, die SSH-Traffic zu einem anderen\\nSystem zu analysieren. Der Honeypot selber ist nicht vom Typ\\nHigh-Interaction. Er kann jedoch mit Hilfe von zus\xe4tzlichen Programmen,\\nwie zu solch einem Typ von Honeypot mutiert werden. Dieser Honeypot\\nbasiert auf der Programmiersprache Python.\\n\\nIm Grunde hat der Honeypot zwei verschiedene Verwendungsm\xf6glichkeiten:\\nEine davon ist das Emulieren von einem Server, der einen SSH-Zugang\\nbereitstellt. Diese Emulation ist jedoch nicht vollst\xe4ndig. D.h. nicht\\nein ganzes Linux System wird emuliert, sondern nur die \xfcblichsten\\nBefehle. So hat es auch im\\n\\"Fake\\"\xa0Dateisystem nur die Dateien, welche man \xfcblicherweise\\nauf einem Linux System findet. Die andere Verwendungsm\xf6glichkeit von\\nCowrie ist das Weiterleiten von einer SSH-Anfrage auf ein echtes System.\\nHier zeichnet Cowrie die gleichen Daten auf wie bei der Emulation. Diese\\nzweite Verwendungsm\xf6glichkeit hat den grossen Vorteil, das echte System\\nf\xfcr einen Angreifer real erscheinen zu lassen, was wiederum eine h\xf6here\\nWahrscheinlichkeit nach sich zieht, dass entweder die Person oder das\\nProgramm die eigenen Methoden enth\xfcllt.\\n\\nCowrie sammelt viele Daten. Im Grunde werden von einem Angreifer\\nfolgende Daten abgespeichert: Der Benutzername und das Passwort, mit\\nwelchem versucht wurde sich einzuloggen sowie die IP-Adresse und die\\neingegebenen Befehle. Zus\xe4tzlich speichert Cowrie auch die von den\\nAngreifern hochgeladenen Dateien.\\n\\nCowrie bietet viele M\xf6glichkeiten, um die gesammelten Daten direkt in\\nandere Programme einzuspeisen. Wenn an der Konfiguration nichts ge\xe4ndert\\nwurde, dann speichert Cowrie die gesammelten Daten in \\"Log\\" Dateien.\\nDiese sind in User Mode Linux () kompatiblen Format, sodass sie mit\\neinem integrierten Programm wiedergegeben werden k\xf6nnen. Andere\\nPlugin, welche\\ndie Einspeisung der Daten in eine SQL-Datenbank oder in ein Statistik\\nProgramm wie z.B. Elastic Stack erm\xf6glichen, k\xf6nnen zus\xe4tzlich aktiviert\\nwerden.\\n\\nDjango\\n------\\n\\nDjango ist ein Framework, welches prim\xe4r f\xfcr die Programmierung\\nvon Webapps und APIs existiert. Dieses\\nFramework\\nbasiert auf der Python-Programmiersprache und wurde von\\nWebentwicklern f\xfcr Webentwickler programmiert.\\n\\nDas Framework, welches mit Django installiert wird,\\ngeneriert sogenannte \\"Projekte\\". Diese beinhalten alle Einstellungen f\xfcr\\ndie Webapp. Weiter generiert dieses Programm auch \\"Applikationen\\",\\nwelche den eigentlichen Programmcode beinhalten, der ausgef\xfchrt wird.\\nSchon mit wenigen Zeilen von Code kann mit Hilfe von Django eine\\nfunktionelle und dynamische Webseite erstellt werden.\\n\\nCloud Server\\n------------\\n\\nEine Cloud ist ein virtueller Computer, der bei einem Cloud-Provider\\ngemietet wird, und auf welchem Programme installiert werden und\\nanschliessend laufen. Ein Kleinunternehmen zum Beispiel mietet eine\\nsolche Cloud, um dort ihre Website zu hosten.\\n\\nDiese Clouds haben gem\xe4ss Red Hat, Inc. [^13] die Option von Skalierbarkeit,\\nwelche es erm\xf6glicht, die Spezifikation eines Servers, z.B. bei mehr\\nAnfragen auf eine Website, anzupassen. Dies dient der Bew\xe4ltigung einer\\nh\xf6heren Arbeitsbelastung..\\n\\nCloud-Provider sind Firmen, die Informatikinfrastruktur, wie z.B.\\n\xf6ffentliche Clouds oder auch private Clouds, zur Verf\xfcgung stellen. Nach Red Hat, Inc. [^13] sind die nachfolgend genannten Provider die bekanntesten und\\ngr\xf6ssten Cloud-Provider: Alibaba Cloud, Amazon Web Services (AWS),\\nGoogle Cloud, IBM Cloud und Microsoft Azure.\\n\\n### EC2-Instanzen\\n\\nAuf der Cloud-Provider-Plattform gibt es die M\xf6glichkeit eine Elastic\\nCompute Cloud (EC2) zu mieten. Diese ist skalierbar, d.h. je nach\\nAusnutzung der Ressourcen kann das Abonnement so angepasst werden, dass\\nnicht mehr als n\xf6tig f\xfcr benutzte Ressourcen bezahlt wird. [^14]\\n\\nRaspberry Pi\\n------------\\n\\nDer Rasperry Pi der Raspberry Organisaton [^15] ist ein Einplatinencomputer,\\nwelcher als einfachen Einstieg in die Welt von Linux und dem\\nProgrammieren entwickelt wurde. Der Computer hat alle Komponenten auf\\neiner einzigen Platine. Dies sind das Grafikchipset, der Prozessor und\\nder Internetanschluss. Wie Abbildung 1 zeigt ist die Gr\xf6sse des\\nRaspberry Pis vergleichbar mit derjenigen einer Kreditkarte.\\n\\n![Ein Raspberry Pi im Vergleich zu einer Kreditkarte](./honeypot/raspberry_pi_kreditkarte.jpg)\\n\\nMaterial und Methoden\\n=====================\\n\\nMaterialien\\n-----------\\n\\nNachfolgend werden die verschiedenen Materialien beschrieben, welche f\xfcr\\ndie Kollektion der Daten gebraucht werden.\\n\\n### Betriebssystem f\xfcr Honeypot\\n\\nEntwickelt wurde Cowrie f\xfcr ein Linux basiertes Betriebssystem. Es kann\\njedoch auch auf anderen Betriebssystemen installiert werden. Dort ist\\ndie Stabilit\xe4t jedoch nicht garantiert. Der Honeypot l\xe4uft f\xfcr die\\nZeitspanne von 30 Tagen. Darum ist es wichtig, dass dieser mit hoher\\nWahrscheinlichkeit funktioniert. Linux ist deshalb die beste Option. Der\\nCloud Provider AWS hat verschiedene Auswahlm\xf6glichkeiten an Linux\\nBetriebssystemen. Der Entscheid fiel auf Ubuntu, da es Open Source ist\\nund die Lernkurve kleiner ist als bei Amazon Linux, welches andere\\nBefehle und Module mitliefert.\\n\\n### Visualisierungsmodul\\n\\nAusgew\xe4hlt f\xfcr ein Visualisierungsmodul, mit welchem die Diagramme auf\\nder Webapp generiert / konstruiert werden, getestet f\xfcr Verwendbarkeit\\nin der Webapp, wurden vorwiegend Javascript Module, wie Chart.js oder\\nD3.js. Diese haben eine grosse Lernkurve, welche zeitlich nicht\\nunterst\xfctzbar ist. Plotly ist ein Pythonmodul, das Javascript Diagramme,\\nmit Hilfe von Dateneingaben vom Python Code generiert.\\n\\nPlotly ist ein einfach zu erlernendes Modul. Es dient zur Visualisierung\\nvon Daten in einer Webapp, welche in Python geschrieben wird.\\n\\n![Website des Visualisierungsmoduls, Plotly](./honeypot/plotly_website_screenshot.png)\\n\\nDas Modul Plotly ist gut aufgebaut. Es hat nicht alle Typen von\\nDiagrammen, welche f\xfcr diese Arbeit gebraucht werden. Des fehlt die\\nWortwolke deshalb wird AnyChart.js f\xfcr diesen Diagramm-Typ benutzt.\\nDiese beiden Module wurden aufgrund ihrer einfachen Benutzung\\nausgew\xe4hlt.\\n\\nEs werden Daten mit Hilfe eines Honeypots gesammelt. Dieser Honeypot\\nl\xe4uft auf einem Server der Amazon Web Services (AWS). Zur Auswahl stehen\\nverschiedene Server L\xf6sungen von AWS. Es gibt jedoch nur zwei Angebote,\\nwelche passend f\xfcr diese Arbeit sind. Der eine ist ein Virtual Private\\nServer (VPS) und der andere eine EC2-Instanz von Amazon. Da die\\nvorliegende Arbeit ein Nullbudget hat, wurde eine EC2-Instanz\\nausgew\xe4hlt. Diese l\xe4uft ein Jahr gratis auf einem Server, der mit\\nanderen Benutzern geteilt wird. Auf der AWS Plattform unter EC2\\nInstanzen gibt es verschiedene Pl\xe4ne, welche diverse Konfigurationen zur\\nVerf\xfcgung stellen. F\xfcr diese Arbeit wird eine EC2-Instanz mit dem\\n\xabt2.micro\xbb-Plan und dem Ubuntu Betriebssystem aufgesetzt, da dieser Plan\\nim oben erw\xe4hnten Gratisjahr von AWS inbegriffen ist. [^16]\\n\\nWarum diese Materialien?\\n------------------------\\n\\nIm Prozess der Recherche wurde Cowrie als Honeypot ausgew\xe4hlt, da dieser\\neine umfangreiche Dokumentation aufweist. Ein anderer Grund, warum\\ndieser Honeypot ausgew\xe4hlt wurde, ist, dass man als Neuling den Honeypot\\nmit relativ wenig Aufwand installieren und aufsetzen kann.\\n\\nDer Entscheid f\xfcr den Cloud-Server ist auf AWS gefallen, da man f\xfcr\\nzw\xf6lf Monate, solange man eine valide Kreditkarte vorweist, gratis einen\\nServer einrichten kann. Der Cowrie Honeypot l\xe4uft auf einer EC2 Instanz.\\n\\nAusgew\xe4hlt wurde Django aufgrund der Lernkurve bei anderen\\nFrameworks,\\nwie z.B. Angular. Dies ist ein Webframework geschrieben in JavaScript\\nund verwaltet von Google. Dazu kommt, dass Django eine Objekt\\nrelationale Abbildungsmethode hat, welche es erm\xf6glicht, auf eine\\nDatenbank mit Objekt orientierten Modellen zuzugreifen.\\n\\nVorgehen\\n--------\\n\\n### Setup von AWS\\n\\nSobald die EC2-Instanz aufgesetzt ist werden einige f\xfcr diese Arbeit\\nnotwendigen \xc4nderungen daran vorgenommen. Als erstes wird der\\n\xabSicherheits-Gruppen\xbb-Panel im EC2-Panel ge\xf6ffnet. Darin wird die frisch\\nkreierte Sicherheitsgruppe ge\xf6ffnet und die \xabinbound rules\xbb werden\\nbearbeitet. Wie Abbildung 4 zeigt, wird eine erste Regel f\xfcr den Port\\n60895 kreiert. Dieser wird von der Seite des Administrators her benutzt\\nf\xfcr den SSH Zugriff auf den Server. Die zweite Regel ist f\xfcr den SSH\\nZugriff vom Angreifer. Wie auf der Abbildung 3 zu sehen ist, kann jeder\\nauf diesen Port zugreifen. Auf den Port in der ersten Regel kann man nur\\nmit einer spezifischen IP-Adresse zugreifen.\\n\\n![Das \'Inbound Rules\' Dashboard von EC2](./honeypot/aws_ec2_inbound_rules_screenshot.png)\\n\\n### Installation von Cowrie\\n\\nDie Software f\xfcr den Honeypot ist Open Source. Um den\\nInstallationsprozess des Honeypots auf dem Server zu vereinfachen, ist\\nein Skript daf\xfcr im Anhang enthalten. Dieses Skript aktualisiert die\\ninstallierten Pakete, und es l\xe4dt die f\xfcr die Installation notwendigen\\nPakete herunter. Nach der Installation der Pakete kreiert das Skript\\neinen neuen Benutzer f\xfcr Cowrie und \xe4ndert auch den Port f\xfcr SSH. Danach\\nl\xe4dt das Skript das Projektarchiv des Honeypots \xabCowrie\xbb von GitHub\\nherunter und speichert dies in Cowries\' Benutzerordner ab. Die\\nKonfigurationsdatei wird ersetzt durch diese, welche im Anhang zu finden\\nist.\\n\\n### Aufbereitung der gesammelten Daten\\n\\nNach der Kollektion aller JSON-Dateien werden diese in eine SQLite\\nDatenbank importiert. Auf diese Datenbank wird mit einem\\nPython Skript\\nzugegriffen. Dieses Skript benutzt Funktionen und Klassen von Django,\\ndamit der Gebrauch von nicht n\xf6tig ist. Diese Funktionen, bereitgestellt\\nvon Django, sind Objekt orientiert. Das bedeutet, dass eine Klasse\\ngeschrieben wird, die als Vorlage dient. Mit Hilfe dieser Klasse lassen\\nsich Daten in die Datenbank hinzuf\xfcgen, l\xf6schen und auch ver\xe4ndern.\\n\\nDas Python\\nSkript kombiniert alle JSON-Dateien zu einer einzelnen Datei. Durch den\\nGebrauch von if-else Anweisungen werden von jeder Linie nur die\\nInformationen, die gebraucht werden, in die Datenbank abgespeichert.\\nSpezielle Informationen erfordern spezielle Aufbereitung, z.B. muss das\\nHerkunftsland der IP-Adressen bestimmt werden.\\n\\n### Generierung der Visualisierungen\\n\\nDie Visualisierungen, mit Ausnahme von den W\xf6rterwolken, werden mit\\nHilfe des Python-Moduls Plotly generiert. W\xf6rterwolken-Visualisierungen\\nwerden nicht direkt mit dem Python-Skript generiert, da dies ein\\nJavascript Modul ist.\\n\\n-   **Loginversuche pro Tag\\\\\\n    ** Bei dieser Visualisierung werden von der Datenbank Informationen\\n    \xfcber die Anzahl Angriffe an einem gegebenen Tag eingeholt.\\n\\n-   **Loginversuche sortiert nach L\xe4ndern\\\\\\n    ** Wichtig war es hier, dass nur die 10 L\xe4nder mit den meisten\\n    Angriffen an das Frontend gesendet werden. Diest ist im\\n    Balkendiagramm in Abbildung 5 enhalten.\\n\\n-   **Loginversuche ganze gemessene Zeit\\\\\\n    ** Dies ist die einfachste Visualisierung, denn diese besteht aus\\n    einer Zahl. Auch hinter den Kulissen passiert nicht viel. Die\\n    Funktion z\xe4hlt die Anzahl Login-Versuche und gibt diese zur\xfcck.\\n\\n-   **Top 10 Benutzer, Passwort und Kombination\\\\\\n    ** Die Anmeldeinformationen, welche von einem Angreifer oder dessen\\n    Skript benutzt wurden, werden visualisiert. Die erste der drei\\n    Visualisierungen zeigt in Form von einer W\xf6rterwolke, welches die\\n    meist ausprobierten Benutzernamen waren. Die zweite Visualisierung\\n    f\xfchrt zum gleichen Ergebnis wie die erste, jedoch mit dem\\n    Unterschied dass sie die am meist probierten Passw\xf6rter\\n    visualisiert. Zuletzt folgt nun die Visualisierung, welche aus einer\\n    Kombination der beiden ersten besteht. Das bedeutet, dass diese\\n    aufzeigt, welches die am meisten ausprobierte Benutzernamen- und\\n    Passwort-Kombination gewesen sind.\\n\\nErgebnisse\\n==========\\n\\nAngriffe per Zeit\\n-----------------\\n\\nEs wurde untersucht, wie oft der Honeypot \xfcber die Zeitspanne von 30\\nTagen angegriffen wird. Im Verlauf dieser Zeit gingen 588\'011\\nLoginversuche vonstatten. T\xe4glich wurde im Durchschnitt 18375,34 Mal\\nprobiert sich in den Honeypot einzuloggen. Am vierten Tag wurde die\\nIP-Adresse des Honeypots von Shodan \\"gescraped\\" und folglich auf ihrer\\nWebsite publiziert, was zu vermehrter \\"Traffic\\" f\xfchrte. Shodan ist ein\\nService, der das ganze Internet scannt. Es scannt die am h\xe4ufigsten\\nbenutzten Ports einer gegebenen IP-Adresse.\\n\\n![Anzahl Login Versuche \xfcber 30 Tage](./diagr/login_attempts.png)\\n\\nAngriffe per Land\\n-----------------\\n\\nUntersucht wird hier, wie oft der Honeypot nach L\xe4ndern sortiert\\nangegriffen wird. In Abbildung 5 sind die zehn L\xe4nder, von welchen am\\nmeisten Loginversuche stammen, ersichtlich. China ist das Land, von dem\\nam meisten Versuche ihren Ursprung haben. Bei genauerer Analyse wurde\\nklar, dass diese Loginversuche von einer einzelnen IP-Adresse stammen.\\nDies f\xfchrt zur Konklusion, dass dieser Akteur sich mit Hilfe von\\nBruteforce\\nversuchte in den Honeypot einzuloggen.\\n\\n![Anzahl Login Versuche nach L\xe4nder](./diagr/attacks_countries.png)\\n\\nTop 10 Benutzernamen\\n--------------------\\n\\nIn Abbildung 6 sind die zehn h\xe4ufigsten ausprobierten Benutzernamen zu\\nsehen. Umso gr\xf6sser die Schrift, desto h\xf6her ist die Anzahl von\\nVersuchen sich mit dem gegebenen Benutzernamen einzuloggen. Am meisten\\nwurde mit dem Benutzernamen \\"root\\" sich versucht einzuloggen. \\"root\\" ist\\nein Standardpasswort, welches auf allen Linux Betriebssystemen\\nexistiert, und es dient der Administration des Computerystems.\\n\\n![Top 10 Benutzernamen](./diagr/top10_usr.png)\\n\\nTop 10 Passw\xf6rter\\n-----------------\\n\\nDas Password \\"ubnt\\" ist jenes, welches am h\xe4ufigsten zum Einloggen\\nverwendet wurde, dies ist ersichtlich in Abbildung 7. Das Password wurde\\nwegen des Betriebsystems Ubuntu, auf welchem Cowrie angibt zu laufen,\\nderart oft probiert.\\n\\n![Top 10 Passw\xf6rter](./diagr/top10_pass.png)\\n\\nTop 10 Benutzernamen und Passw\xf6rter\\n-----------------------------------\\n\\nDie W\xf6rterwolke in Abbildung 8 zeigt, dass die Kombination \\"ubnt:ubnt\\"\\ndie am h\xe4ufigsten verwendete war. Diese Verwendung basiert auf dem\\nBetriebssystem, welches verwendet wurde. Andere ausprobierte\\nKombinationen sind solche, die in Systemen standardm\xe4ssig existieren und\\nvon Anwendern h\xe4ufig nicht ge\xe4ndert werden.\\n\\n![Top 10 Benutzernamen und Passw\xf6rter](./diagr/top10_usrpass.png)\\n\\nProdukt\\n=======\\n\\nWebapp\\n------\\n\\nDie Funktion der Webapp ist es, dem Benutzer zu erm\xf6glichen, die\\nDiagramme direkt generiert zu bekommen. In Abbildung 9 ist die Webapp\\nmit mehreren Diagrammen zu sehen. Diese Diagramme k\xf6nnen alle als Bild\\nabgespeichert werden. Die einen haben diese Funktion von Plotly und f\xfcr\\ndie anderen ist ein Knopf programmiert worden, welcher die gleiche\\nFunktionalit\xe4t erm\xf6glicht.\\n\\n![Screenshot von Webapp](./dash_screen.png)\\n\\nAufbau\\n------\\n\\nF\xfcr das Produkt wird als Grundlage f\xfcr die Software ein Raspberry Pi\\nben\xf6tigt. Cowrie wird auf dem Raspberry Pi installiert. Nach dieser\\nInstallation wird eine Konfiguration ben\xf6tigt, welche die Logs als\\nJSON-Dateien abspeichert. Das Helper Skript benutzt Pygtail, ein Modul,\\nwelches f\xfcr jede neue Linie in einer Datei eine bestimmte Funktion\\nauszuf\xfchren erm\xf6glicht. In diesem Fall wird die Funktion f\xfcr den Import\\nin eine Datenbank ausgef\xfchrt. Das Frontend l\xe4dt sich jede Sekunde neu,\\num die aktuellsten Ergebnisse anzuzeigen. Die ganze Funktionsweise ist\\nin Abbildung 10 aufgezeigt.\\n\\n![Funktionsweise des Produktes](./funktionsweise_software.png)\\n\\nIm Diagramm in Abbildung 10 wird gezeigt, dass ein Angreifer den\\nRaspberry Pi \xfcber den Netzwerk-Port 22 angreift. Dieser Angriff wird\\ndanach von Cowrie bearbeitet. D.h. Cowrie entscheidet dann per Zufall,\\nob der Angriff in die Konsole eingeloggt werden soll. Dies wird getan,\\num gegen die \xdcberlastung des Host-Computers anzuk\xe4mpfen.\\n\\nIn der Abbildung sind Cowrie und die Datei mit dem Namen *cowrie.json*\\nmit einem Pfeil verbunden, welche von Cowrie erstellt wird. Ein vom\\nAutor der vorliegenden Arbeit erstelltes Python-Skript \xfcberpr\xfcft die\\nDatei periodisch nach neuen Zeilen. Falls *pygtail*, ein Python-Modul,\\neine neue Zeile entdeckt, dann bereitet es die Daten im JSON-Format auf\\nund speichert diese in einer Datenbank ab. Sobald der vorherige Prozess\\nendet, wird eine Funktion ausgef\xfchrt, welche die Diagramme f\xfcr die\\nWebapp aktualisiert. Dieser f\xfcr die Webapp generierten HTML-Code wird\\nwiederum in die Datenbank abgespeichert.\\n\\nIn der Webapp l\xe4uft im Hintergrund ein Javascript-Programm. Dieses fragt\\nperiodisch einen Zugriffspunkt nach der neusten Version der Diagramme.\\nDiese Diagramme werden danach im HTML-Code ersetzt, sodass der\\nEndbenutzer nichts davon mitbekommt.\\n\\nFunktionen\\n----------\\n\\nDie Webapp hat die Funktion, dem Benutzer eine visuelle Darstellung von\\nden Daten, die der Honeypot gesammelt hat. Es war klar, dass eine Webapp\\nentwickelt werden soll. Denn es wurde gesehen, wie kompliziert die\\nDatenstrutkur in den Log-Dateien sein kann. Folglich hat das Produkt\\neine klarere Zielgruppe. N\xe4mlich Laien, welche an den Methoden eines\\nHackers interessiert sind.\\n\\n### Diagramme abspeichern\\n\\nEin klarer Hintergedanke der Webapp ist die Analyse der Daten und auch\\ndie Sicherung eines Bildes des generierten Diagrammes, da diese Webapp\\nauch dazu dient, die Visualisierungen f\xfcr diese Arbeit zu generieren.\\nDiese k\xf6nnen bei den W\xf6rterwolken mit einem Klick auf den \\"Save as PNG\\"\\nKnopf get\xe4tigt werden. In Abbildungen 4 und 5 ist die M\xf6glichkeit\\nvorhanden, den Ausschnitt des Diagrammes zu w\xe4hlen und diesen mit Klick\\nauf das Kamera-Bildchen abzuspeichern.\\n\\n### Live-Auswertung\\n\\nDie Webapp l\xe4dt periodisch neue Daten vom Server herunter, damit der\\nEndbenutzer immer die aktuellsten Daten auf einen Blick zu sehen\\nbekommt. Diesen Parameter, wie oft die Webapp ihren Inhalt aktualisiert,\\nkann im Quellcode angepasst werden.\\n\\nErkenntnisse und Beantwortung der Leitfrage\\n===========================================\\n\\nNach der Analyse der gesammelten Daten konnte festgestellte werden, dass\\nvon einer chinesischen IP-Adresse ein Angriff auf den Honeypot gestartet\\nwurde. Ein Angreifer hat ganz klar einen Grund, warum er gerade diese\\nIP-Adresse angreift. Die Schritte, welche ein Angreifer durchl\xe4uft, sind\\nnachfolgend beschrieben:\\n\\n-   Zuerst informiert sich der Angreifer \xfcber das Ziel.\\n\\n-   Mit diesen gesammelten Informationen stellt sich der Anreifer nun\\n    ein Attack-Toolset zusammen.\\n\\n-   Das Toolset dient dem Eindringen in ein Netzwerk.\\n\\n-   Sobald sich der Angreifer im Netz befindet, versucht sich dieser\\n    darin zu etablieren.\\n\\n-   Im Netzwerk, befindend mit Zugriffsrechten, versucht dieser\\n    Angreifer nun ausnutzbare Schwachstellen zu finden.\\n\\n-   Sobald diese Schwachstellen gefunden wurden, wird eine spezifische\\n    Malware\\n    ausgef\xfchrt, welche dem Angreifer volle Kontrolle \xfcber ein\\n    Computersystem gibt.\\n\\n-   Danach wird der eigentliche Angriff ausgef\xfchrt. Dieser ist der\\n    Grund, warum \xfcberhaupt angegriffen wurde. Dies kann wegen Erpressung\\n    mit Hilfe einer Ransomware sein oder auch wegen Datenexfiltration.\\n\\nDer aus China stammende Angriff hat versucht, sich im Netzwerk zu\\netablieren, wie man in den Logs sehen kann. Dieser war jedoch nicht\\nerfolgreich, da das angegriffene System ein Honeypot ist, der gewisse\\nLimitationen aufweist.\\n\\nDie Schritte, welche der Angreifer durchgelaufen ist, wurden von\\nLockheed Martin [^3] im Cyber Kill Chain Lockheed Martin [^3] beschrieben. Verglichen\\nmit der Literatur von zerodetail [^17] zeigt sich, dass Honeypots am\\nh\xe4ufigsten von IP-Adressen, welche aus China stammen, angegriffen\\nwerden.\\n\\nIm Prozess des Schreibens dieser Arbeit wurde klar, dass die Leitfrage\\neinen falschen Weg vorschl\xe4gt. Denn dies Leitfrage nimmt an, dass ein\\nHoneypot eine Option f\xfcr die Verteidigung eines Heimnetzwerkes sein\\nk\xf6nnte. Jedoch ist dies eine etwas zu komplizierte Sache f\xfcr den\\nPrivatanwender. Die Antwort auf die Leitfrage ist somit Nein, denn ein\\nHoneypot ist keine effektive Schutzmethode f\xfcr ein Heimnetzwerk. Ein\\nPrivatanwender sollte, um sich gegen m\xf6gliche Angreifer gut zu r\xfcsten,\\nregelm\xe4ssig Backups machen, sei dies lokal oder in einer Cloud. Auch\\nsollte der Anwender \xfcberpr\xfcfen, ob dessen Heimnetzwerk so konfiguriert\\nist, wie es dessen Internet-Service-Provider vorschl\xe4gt.\\n\\nReflexion und Ausblick\\n======================\\n\\nIm Nachhinein ist es offensichtlich, dass die Leitfrage nicht so\\nbeantwortet werden kann wie sie vorliegt. Anfangs war es schwierig, sich\\nin die Denkweisen eines Wissenschaftlers zu versetzen und wirklich\\nverwendbare Quellen zu finden. Im Verlauf der Arbeit wurde jedoch klar,\\nwelche Internet- und Buchquellen sich f\xfcr eine solche Arbeit eignen.\\n\\nF\xfcr eine n\xe4chste wissenschaftliche Arbeit w\xfcrde ich als Autor im\\nAllgemeinen zwei Dinge beachten: 1. Ich w\xfcrde ein kleineres und\\nspezifischeres Themenfeld ausw\xe4hlen. 2. Ich w\xfcrde eine Arbeit w\xe4hlen bei\\nder das Produkt und nicht die gesammelten Daten analysiert werden.\\n\\nIm Verlaufe der Programmierung dieser Arbeit habe ich die\\nProgrammiersprache gewechselt, da ich mit JavaScript nicht so\\nzurechtgekommen bin wie ich mir das vorgestellt habe. Mit\\nPython hingegen\\nbin ich schon vor dem Start dieser Arbeit klargekommen. Mit dem\\nSprachwechsel wurde auch das Web-Framework von Angular zu Django\\ngewechselt. Angular ist ein sehr breit gef\xe4chertes\\nFramework,\\nwelches auch von Google, einer grossen Organisation, unterst\xfctzt wird.\\nDiese breiten Funktionalit\xe4ten kommen aber nicht ohne Nachteile. Einer\\nw\xe4re, dass Angular selbst eine sehr grosse Lernkurve hat, hingegen mit\\nDjango kann schon mit wenigen Linien Programmcode eine funktionelle,\\ndynamische Webseite erstellt werden.\\n\\nDas Produkt, das nun am Ende existiert, liesse sich sehr gut noch\\nweiterentwickeln und verbessern. Das gr\xf6sste Problem ist im Moment die\\nGeschwindigkeit des Ladens der Diagramme. Diese k\xf6nnen sicherlich im\\nJavaScript-Code und auch in Django verbessert werden. Eine Idee w\xe4re\\nauch noch, in der Webapp mehr Daten zu analysieren, wie z.B. die\\nschadhaften Programme, welche auf den Server hochgeladen wurden. Weiter\\nw\xe4re es auch interessant, generell mehr Kontrolle \xfcber den RaspberryPi\\nmit Hilfe des Webapps zu haben.\\n\\nDanksagungen\\n============\\n\\nHiermit m\xf6chte ich allen danken, welche mir mit dieser Maturaarbeit\\ngeholfen haben und denen ich sehr dankbar daf\xfcr bin. Ich m\xf6chte im\\nSpeziellen meinem Betreuer Samuel Schaffhauser danken f\xfcr die\\nvortreffliche Betreuung. Vor allem m\xf6chte ich auch meiner Familie -\\nmeiner Mutter, meinem Vater, meinen beiden Schwestern sowie meiner Tante\\n- danken.Dderen kontinuierliche und grenzenlose Unterst\xfctzung, das\\ngeduldiges Korrekturlesen und die abendlichen Diskussionen haben dazu\\nbeigetragen, meine Maturaarbeit so verst\xe4ndlich und aussagekr\xe4ftig wie\\nm\xf6glich zu verfassen. Roland Tobler m\xf6chte ich danken f\xfcr den Einblick\\nin die Cybersecurity, dies hat mir sehr geholfen beim Schreiben dieser\\nArbeit.\\n\\nDeclaration of Honesty in Academic Work\\n=======================================\\n\\nI hereby declare\\n\\n*   that this Matura thesis is my own work, and that I did not use any\\n    other sources than the cited ones,\\n\\n*   that I explicitly mention any help by third party,\\n\\n*   that I will inform the headmaster as well as my advisor in case that\\n    I\\n\\n    *   publish this entire thesis or parts of it,\\n\\n    or\\n\\n    *   hand out copies of this thesis to third party for further\\n        distribution.\\n\\n*   that I am aware of the contents of the document \\"Plagiat\\" and also\\n    of the consequences of plagiarism.\\n\\nRedlichkeitserkl\xe4rung\\n=====================\\n\\nIch erkl\xe4re hiermit,\\n\\n*   dass ich die vorliegende Arbeit selbst\xe4ndig verfasst und nur die\\n    angegebenen Quellen benutzt habe,\\n\\n*   dass ich auf eine eventuelle Mithilfe Dritter in der Arbeit\\n    ausdr\xfccklich hinweise,\\n\\n*   dass ich vorg\xe4ngig die Schulleitung und die betreuende Lehrperson\\n    informiere, wenn ich\\n\\n    *   diese Maturarbeit bzw. Teile oder Zusammenfassungen davon\\n        ver\xf6ffentlichen werde\\n\\n    oder\\n\\n    *   Kopien dieser Arbeit zur weiteren Verbreitung an Dritte\\n        aush\xe4ndigen werde.\\n\\n*   dass mir das Merkblatt \\"Plagiat\\" sowie auch die Konsequenzen eines\\n    Plagiats bekannt sind.\\n\\nLuzern,\\n\\nEnea Kr\xe4henb\xfchl\\n\\n---\\n## Glossar\\n\\n\\nPython\\n: [Python](https://python.org) ist eine *h\xf6here* Programmiersprache, welche von Guido van Rossum entwickelt wurde. Bei der Entwicklung von Python wird Wert auf Einfachheit und \xdcbersichtlichkeit gelegt. Vielerorts ist Python auch die Programmiersprache welche jungen Teenagern als Einstieg in die Informatik empfohlen wird\\n\\nExploit\\n: Ein Programm, welches eine Sicherheitsl\xfccke ausnutzt\\n\\nMalware\\n: in Deutsch *Schadsoftware*; Software, welche einem Ger\xe4t digitalen Schaden zurichten kann\\n\\nQEMU\\n: Abk\xfcrzung f\xfcr *Quick EMUlator*; ein Emulator ist eine Software, die es erm\xf6glicht, ein Computersystem innerhalb von einem anderen Computersystem laufen zu lassen\\n\\nDateisystem\\n: Nach Wikipedia ist es ein *Computerprogramm, das als Bestandteil des Betriebssystems das Speichern, Lesen und L\xf6schen von Dateien auf einem Datentr\xe4ger organisiert*\\n\\nUML\\n: Abk\xfcrzung f\xfcr *User Mode Linux*; UML erlaubt es komplette Linux-Kernel innerhalb eines Linux-Systems als Applikationsprozess auszuf\xfchren (Quelle: Wikipedia); ein Kernel ist ein Komponent in einem Betriebssystem, welcher zwischen den verschiedenen Hardware-Komponenten und der Software steht und somit wie ein \xdcbersetzer einer bestimmten Art agiert\\n\\nSQL\\n: Abk\xfcrzung f\xfcr *Sequel Query Language*; eine Sprache, welche den Nutzen hat, mit einer Datenbank zu interagieren\\n\\nPlugin\\n: Ein Zusatz zu einem Programm, welches nach Belieben eines Nutzers installiert werden kann\\n\\nFramework\\n: Nach [Chip.de](https://praxistipps.chip.de/was-ist-ein-framework-einfach-erklaert_41348): *Ein Programm-Code besteht aus vielen kleinen Bausteinen. Um das Programmieren zu erleichtern und Zeit zu sparen, gibt es sogenannte Frameworks. Sie sind keine eigenst\xe4ndigen Programme, sondern stellen ein Programmierger\xfcst f\xfcr den Entwickler dar*\\n\\nIRC\\n: Abk\xfcrzung f\xfcr *Internet Relay Chat*; nach Wikipedia *bezeichnet IRC ein textbasiertes Chat-System*; in dieser Arbeit bezieht sich IRC auf die Kontrolle und Steuerung eines Servers\\n\\nSocial Engineering\\n: Das *Hacken* von Menschen; Mit hilfe von geschickter Sprache und Verk\xf6rperung wird ein Opfer get\xe4uscht etwas zu tun\\n\\nBackdoor\\n: in Deutsch *Hintert\xfcre*; in der Cybersecurity ist dies f\xfcr einen Angreifer eine M\xf6glichkeit auf ein System zuzugreifen ohne, dass dieser das konventionelle Login-System benutzt\\n\\nBr\xfcckenkopf\\n: Nach dem Duden *kleines Gel\xe4ndest\xfcck, das auf dem feindlichen Ufer besetzt worden ist und das als Ausgangsbasis f\xfcr die weiteren Kampfhandlungen dient*; hier ist dies ein Computer, der angegriffen wird, welcher als Ausgangspunkt f\xfcr weitere Angriffe gilt\\n\\nCommand and Control\\n: in Deutsch *Kontrolle und Steuerung*; hier Kontrolle und Steuerung eines Computersystems\\n\\nKommandozeilenprogramm\\n: Ein Programm welches in der Kommandozeile l\xe4uft, d.h. es wird mit einem Tex-Input Feld bedient.\\n\\ndynamische Website\\n: Eine Website welche sich ver\xe4ndert, z.B. *eine Zeitung-Website soll neue Artikel automatisch auf der Website anzeigen*\\n\\nexponiert\\n: Gem\xe4ss Duden *in eine der Aufmerksamkeit oder m\xf6glichen Angriffen, Gefahren ausgesetzte Lage, Situation bringen*\\n\\nORM\\n: Abk\xfcrzung f\xfcr *Object-Relational Mapper*; ein Komponent in Django, welcher die Interaktion mit einer Datenbank auf einem einfachen Wege erm\xf6glicht.\\n\\nAWS\\n: Abk\xfcrzung f\xfcr Amazon Web Services. Ein Teil von Amazon Inc. der Webservices anbietet.\\n\\n## Literaturverzeichnis\\n\\n[^1]: Lukas M\xe4der. Bund warnt vor Attacken. 17. M\xe4rz 2020. url: https://www.nzz.ch/schweiz/nach-cyberangriff-auf-tschechisches- spital-warnt-auchder-bund-vor-attacken-ld.1546736 (besucht am 10. 06. 2020).\\n[^2]: Risk Based Security. Number of Records Exposed in 2019 Hits 15.1 Billion. 10. Feb.2020. url: https://riskbasedsecurity.com/2020/02/10/number-of-records-exposed-in-2019-hits-15-1-billion/ (besucht am 13. 07. 2020).\\n[^3]: Lockheed Martin. About Lockheed Martin. 3. Sep. 2020. url: https://www.lockheedmartin.com/en-us/who-we-are.html (besucht am 03. 09. 2020).\\n[^4]: Kaspersky. Was ist Cybersicherheit? 2020. url: https://www.kaspersky.de/resource-center/definitions/what-is-cyber-security (besucht am 26. 08. 2020).\\n[^5]: Lockheed Martin. The Cyber Kill Chain. 3. Sep. 2020. url: https ://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill- chain.html (besucht am 03. 09. 2020).\\n[^6]: Peter Schmitz. Cyber Kill Chain - Grundlagen, Anwendung und Entwicklung.19. Mai 2017. url: https://www.security-insider.de/cyber-kill-chaingrundlagen-anwendung-und-entwicklung-a-608017/ (besucht am 05. 09. 2020).\\n[^7]: Dipl.-Ing. (FH) Stefan Luber. Was ist ein Honeypot? 2018. url: https://www.security-insider.de/was-ist-ein-honeypot-a-703883/ (besucht am 14. 08. 2020).\\n[^8]: ionos.de. Honeypot: IT-Sicherheit durch Ablenkprogramme - IONOS. 2019. url:https://www.ionos.de/digitalguide/server/sicherheit/honeypot-itsicherheit-durch-ablenkprogramme/ (besucht am 14. 08. 2020).\\n[^9]: \\u0013Chapter 5 - Honeypotting\\u0014. In: Virtualization for Security. Hrsg. von John Hoopes.Boston: Syngress, 2009, S. 117\\u0015143. isbn: 978-1-59749-305-5. doi: https://doi.org/10.1016/B978-1-59749-305-5.00005-0.url: http://www.sciencedirect.com/science/article/pii/B9781597493055000050.\\n[^10]: Spitzner Lance. Honeypots: Tracking Hackers. Addison-Wesley Professional, 2002.[^11]: awhitehatter. Mailoney an SMTP Honeypot. 18. Aug. 2020. url: https://github.com/awhitehatter/mailoney (besucht am 18. 08. 2020).\\n[^12]: Michael Osterheim. Cowrie SSH and Telnet Honeypot. 18. Aug. 2020. url: https://github.com/cowrie/cowrie (besucht am 18. 08. 2020).\\n[^13]: Red Hat, Inc. What are cloud providers? 20. Aug. 2020. url: https://www.redhat.com/en/topics/cloud- computing/what- are- cloud- providers (besucht am 20. 08. 2020).\\n[^14]: Amazon Web Services. Amazon EC2. 5. Sep. 2020. url: https://aws.amazon.com/de/ec2/ (besucht am 05. 09. 2020).\\n[^15]: Raspberry. Raspberry Pi. 5. Sep. 2020. url: https://raspberrypi.org (besuchtam 05. 09. 2020).\\n[^16]: Amazon Web Services, Inc. AWS Free Tier. 23. Aug. 2020. url: https://aws.amazon.com/free/ (besucht am 23. 08. 2020).\\n[^17]: zerodetail. Analyzing cowrie honeypot. 14. Sep. 2020. url: https://zeroaptitude.com/zerodetail/analyzing-cowrie-honeypot-results/ (besucht am 10. 06. 2020)."}]}')}}]);